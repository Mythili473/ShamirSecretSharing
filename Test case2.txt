// Class to represent a Share (base, value pair)
class Share {
    constructor(base, value) {
        this.base = base;
        this.value = value;
    }
}

// Function to perform Lagrange interpolation
function lagrangeInterpolation(shares, x) {
    let result = 0.0;

    for (let i = 0; i < shares.length; i++) {
        let term = shares[i].value;
        for (let j = 0; j < shares.length; j++) {
            if (i !== j) {
                term *= (x - shares[j].base) / (shares[i].base - shares[j].base);
            }
        }
        result += term;
    }

    return result;
}

// Function to reconstruct the constant term (secret) from the JSON data
function reconstructConstantTerm(data) {
    const k = data.keys.k;

    // Collect the shares from the JSON object
    const shares = [];
    for (let i = 1; i <= k; i++) {
        const base = parseInt(data[i].base);
        const value = parseInt(data[i].value);
        shares.push(new Share(base, value));
    }

    // Use Lagrange interpolation to find the constant term
    const secret = lagrangeInterpolation(shares, 0);
    return Math.round(secret);
}

// Main function to run the program
function main() {
    // Example JSON data (same as the one you provided)
    const data = {
        "keys": {
            "n": 4,
            "k": 3
        },
        "1": {
            "base": "1",
            "value": "4"
        },
        "2": {
            "base": "2",
            "value": "111"
        },
        "3": {
            "base": "3",
            "value": "96"
        }
    };

    // Reconstruct the constant term (secret)
    const secret = reconstructConstantTerm(data);

    // Print the result
    console.log('Reconstructed constant term (secret): ' + secret);
}

// Call the main function
main();

    public static void main(String[] args) {
        // Sample input
        String jsonString = "{ \"keys\": { \"n\": 4, \"k\": 3 }, \"1\": { \"base\": \"10\", \"value\": \"4\" }, \"2\": { \"base\": \"2\", \"value\": \"111\" }, \"3\": { \"base\": \"10\", \"value\": \"12\" }, \"6\": { \"base\": \"4\", \"value\": \"213\" }}";
        
        // Manual parsing of the input (since org.json is not available)
        Map<String, Map<String, String>> data = new HashMap<>();
        
        data.put("1", new HashMap<>(Map.of("base", "10", "value", "4")));
        data.put("2", new HashMap<>(Map.of("base", "2", "value", "111")));
        data.put("3", new HashMap<>(Map.of("base", "10", "value", "12")));
        data.put("6", new HashMap<>(Map.of("base", "4", "value", "213")));

        // Extracting the number of points and required roots from the "keys" object
        int n = 4; // number of roots
        int k = 3; // minimum required points to solve the polynomial

        // Arrays to hold the x and decoded y values
        int[] x = new int[k];
        int[] y = new int[k];

        int count = 0;
        for (String key : data.keySet()) {
            if (count >= k) break;
            Map<String, String> root = data.get(key);
            int base = Integer.parseInt(root.get("base"));
            String value = root.get("value");

            // Fill in x and decoded y arrays
            x[count] = Integer.parseInt(key); // x is the key itself
            y[count] = decode(value, base);   // Decode y based on the given base

            count++;
        }

        // Use Lagrange interpolation to find the constant term 'c'
        double constant = lagrangeInterpolation(x, y, k);

        // Output the result
        System.out.println("The constant term (c) is: " + (int) Math.round(constant));
    }
}