// Class to represent a Share (base, value pair)
class Share {
    constructor(base, value) {
        this.base = base;
        this.value = value;
    }
}

// Function to perform Lagrange interpolation
function lagrangeInterpolation(shares, x) {
    let result = 0.0;

    for (let i = 0; i < shares.length; i++) {
        let term = shares[i].value;
        for (let j = 0; j < shares.length; j++) {
            if (i !== j) {
                term *= (x - shares[j].base) / (shares[i].base - shares[j].base);
            }
        }
        result += term;
    }

    return result;
}

// Function to reconstruct the constant term (secret) from the JSON data
function reconstructConstantTerm(data) {
    const k = data.keys.k;

    // Collect the shares from the JSON object
    const shares = [];
    for (let i = 1; i <= k; i++) {
        const base = parseInt(data[i].base);
        const value = parseInt(data[i].value);
        shares.push(new Share(base, value));
    }

    // Use Lagrange interpolation to find the constant term
    const secret = lagrangeInterpolation(shares, 0);
    return Math.round(secret);
}

// Main function to run the program
function main() {
    // Example JSON data (same as the one you provided)
    const data = {
        "keys": {
            "n": 4,
            "k": 3
        },
        "1": {
            "base": "1",
            "value": "4"
        },
        "2": {
            "base": "2",
            "value": "111"
        },
        "3": {
            "base": "3",
            "value": "96"
        }
    };

    // Reconstruct the constant term (secret)
    const secret = reconstructConstantTerm(data);

    // Print the result
    console.log('Reconstructed constant term (secret): ' + secret);
}

// Call the main function
main();
